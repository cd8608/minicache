#!/usr/bin/python
from pylibs.common import *
import numpy as np
import matplotlib
matplotlib.use("Agg") # no GUI output
import matplotlib.pyplot as plt
import matplotlib.ticker as mt
import matplotlib.cm as cm
import matplotlib.colors as colors
import matplotlib.font_manager as fp
from mpl_toolkits.mplot3d.axes3d import Axes3D
from scipy import stats

markers = ( '^', 's', 'o', 'D', 'x', '*', '|', 'h' )
colors = ('#ccecff', '#99b1bf', '#667680', '#282e32') # bgray
#colors = ('#ffffff', '#c0c0c0', '#808080', '#202020')
#colors = ('b', 'g', 'r', 'c', 'm', 'y', 'k')
hatches = ('/', '\\', 'x', '-', '.', 'O', ' ')
skip_nb_initial_msmnts = 0
# BAR settings
bwidth = 1

##
## MAIN
##

printf("Loading file '%s'...\n", sys.argv[1])
## Load file into result, columns are:
#  [0] DISK-ID*
#  [1] INDIRECT MODE?*
#  [2] BLOCK SIZE*
#  [3] PACKET SIZE (ethernet frame size without preamble)**
#  [4] PACKETS PER BLOCK**
#  [5] PACKET: HEADER LENGTH**
#  [6] PACKET: BLOCK DATA LENGTH**
#  [7] PACKET: ADDITIONAL PAYLOAD LENGTH*
#  [8] PACKET: UDP CHECKSUM*
# ---
#  [9] NUMBER OF READ BLOCKS***
# [10] NUMBER OF SENT PACKETS***
# [11] INTERVAL LENGTH***
# [12] TIMESTAMP***
# <..> optional fields (not handled by this script)
#
# *) settings
# **) resulting properties (dependent on settings)
# ***) measurement values
result = np.genfromtxt(sys.argv[1], delimiter=";", skip_header=True)

# Collect test settings
test_disks = np.unique(result.T[0])
test_modes = np.unique(result.T[1])
test_blksizes = np.unique(result.T[2])
test_apayloads = np.unique(result.T[7])
test_chksums = np.unique(result.T[8])
min_ts = np.min(result.T[12])
max_ts = np.max(result.T[12])
nb_disks = len(test_disks)
nb_modes = len(test_modes)
nb_blksizes = len(test_blksizes)
nb_apayloads = len(test_apayloads)
nb_chksums = len(test_chksums)

# create plot
fig = plt.figure()
ax = plt.subplot(111)
ax.xaxis.set_major_formatter(matplotlib.ticker.FormatStrFormatter("%0.1f s"))
plt.xlim((0, max_ts-min_ts))
ax.set_ylabel("Throughput")
ax.yaxis.set_major_formatter(HumanReadableFormatter("B/s", infix="i", multiple=1024))

# plot loop
d = 0
printf("Plotting...")
for i_disk in range(0, nb_disks):
    disk = test_disks[i_disk]
    _st0 = subtable_where(result, 0, "==", disk)
    for i_mode in range(0, nb_modes):
        mode = test_modes[i_mode]
	_st1 = subtable_where(_st0, 1, "==", mode)
        for i_blksize in range(0, nb_blksizes):
            blksize = test_blksizes[i_blksize]
	    _st2 = subtable_where(_st1, 2, "==", blksize)
	    for i_apayload in range(0, nb_apayloads):
                apayload = test_apayloads[i_apayload]
		_st3 = subtable_where(_st2, 7, "==", apayload)
		for i_chksum in range(0, nb_chksums):
                    chksum = test_chksums[i_chksum]
                    _st4 = subtable_where(_st3, 8, "==", chksum)
                    if len(_st4) == 0:
                        continue
                    st = _st4

                    #print st

		    # generate label
		    details = []
		    comments = []
		    if nb_disks > 1:
                        details.append("Disk %d" % (label, disk))
		    details.append("%s in %d pkt(s)" % (human_readable(blksize, unit="B", infix="i", multiple=1024), st.T[4][0]))
		    if nb_modes > 1:
                        if mode == 1:
                            comments.append("I-I/O")
			else:
                            comments.append("D-I/O")
		    if nb_apayloads > 1:
			    comments.append("Addit. payload: %s" % (comment, human_readable(apayload, unit="B", infix="i", multiple=1024)))
		    if nb_chksums > 1 and chksum >= 1:
			    comments.append("Checksum" % (label, chksum))

		    label = ' '.join(details)
		    if len(comments) > 0:
			    label = "%s (%s)" % (label, ','.join(comments))

                    # derive x, y coordinates
		    x = np.empty(shape=(0, 1), dtype=result.dtype)
		    y = np.empty(shape=(0, 1), dtype=result.dtype)

		    for i in range(0, len(st.T[0]) - skip_nb_initial_msmnts - 1):
                        if (i > 0):
                            x = np.append(x, st.T[12][i] - (st.T[11][i] / 2) - min_ts) # time
                            y = np.append(y, ((st.T[9][i] - st.T[9][i - 1]) * blksize) / st.T[11][i]) # 
                    if (len(x) == 0):
                        continue

                    ax.plot(x, y, linewidth=1, linestyle='-', marker=markers[d % len(markers)], color='k', markerfacecolor=colors[d % len(colors)], label=label)

                    d = d + 1
		    printf(".")
printf("Done\n")
printf("%d data sets plotted\n", d)

printf("Adjusting graph properties...\n")
# shrink x-axis by 20%
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
# put a legend to the right of the x-axis
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

# save files
printf("Writing PDF...\n")
plt.savefig("%s_%s.pdf" % (sys.argv[1], "thrpt-t"))
#plt.show()
exit(0)
